<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, August 27, 2010, 6:32 PM -->
<!-- MuClient version 4.56 -->

<!-- Plugin "pkuxkx_layout" generated by Plugin Wizard -->

<muclient>

<plugin
   name="sjmush_Main_Layout"
   author="Lasher"
   id="c293f9e7f04dde889f65cb90"
   language="Lua"
   purpose="Layout sjmush Main Screen"
   date_written="2010-08-27 18:32:06"
   requires="4.56"
   version="1.0"
   save_state="y"
>
</plugin>

<aliases>
<alias
   script="reset_aard"
   match="resetmain"
   enabled="y"
   sequence="100"
   ignore_case="y"
></alias>

<alias
   script="reset_aard"
   match="resetaard"
   enabled="y"
   sequence="100"
   ignore_case="y"
></alias>
</aliases>

<!--  Script  -->

<script>
<![CDATA[

--title_colour          = 0xf92929
RESIZE_TAG_SIZE = 10

default_top = 140
default_bottom = 544
default_left = 7
default_right = 650

-- Variables not saved.
startx           = ""  
starty           = ""
posx             = "" 
posy             = ""
hotspot_id       = ""
orig_height      = 400  -- saves old height when we collapse window.
MIN_SIZE         = 50
rstagsize        = 15

function ResizeMainCallback()
   posx, posy = WindowInfo (textResizer, 17), WindowInfo (textResizer, 18)
   textrect_right = textrect_right + posx - startx
   startx = posx
   if ( textrect_right-textrect_left < MIN_SIZE) then
      textrect_right = textrect_left+MIN_SIZE
      startx = textrect_right
   elseif (textrect_right > GetInfo(281)-7) then
      textrect_right = GetInfo(281)-7
      startx = textrect_right
   end
   
   textrect_bottom = textrect_bottom + posy - starty
   starty = posy
   if ( textrect_bottom-textrect_top < MIN_SIZE) then
      textrect_bottom = textrect_top+MIN_SIZE
      starty = textrect_bottom
   elseif (textrect_bottom > GetInfo(280)-7) then
      textrect_bottom = GetInfo(280)-7
      starty = textrect_bottom
   end

   draw_main_window()
end

function DragMainCallback()

   posx, posy = WindowInfo (textDragger, 17), WindowInfo (textDragger, 18)
   local height = GetInfo(293) - GetInfo(291)
   local width = GetInfo(292) - GetInfo(290)
   
   textrect_left = textrect_left + posx - startx
   textrect_right = textrect_left + width
   if (textrect_left <= 7) then
      textrect_left = 7
      textrect_right = textrect_left + width
   elseif (textrect_right >= GetInfo(281)-7) then
      textrect_right = GetInfo(281)-7
      textrect_left = textrect_right - width
   else
      startx = posx
   end
  
   textrect_top = textrect_top + posy - starty
   textrect_bottom = textrect_top+height
   starty = posy
   if (textrect_top < 7) then
      textrect_top = 7
      starty = textrect_top
      textrect_bottom = textrect_top+height
   elseif (textrect_bottom > GetInfo(280)-7) then
      textrect_bottom = GetInfo(280)-7
      textrect_top = textrect_bottom-height
      starty = textrect_top
   end

   draw_main_window()
end


---------------------------------------------------------------------------------
-- Called after the resize widget is released.
---------------------------------------------------------------------------------
function ResizeReleaseMainCallback()
   OnPluginSaveState()
end

function DragReleaseMainCallback()
   OnPluginSaveState()
end

---------------------------------------------------------------------------------
-- Called when mouse button is pressed on hotspot.
---------------------------------------------------------------------------------
function MouseDown(flags, hotspot_id)
   if (hotspot_id == "resizemain") then
      startx, starty = WindowInfo (textResizer, 17), WindowInfo (textResizer, 18)
   elseif (hotspot_id == "dragmain") then
      startx, starty = WindowInfo (textDragger, 17), WindowInfo (textDragger, 18)
   end
end

---------------------------------------------------------------------------------
-- Called when mouse moved away from hotspot. Doesn't really apply for draggables.
---------------------------------------------------------------------------------
function CancelMouseDown(flags, hotspot_id)
end

---------------------------------------------------------------------------------
-- Called when mouse button released on hotspot.
---------------------------------------------------------------------------------
function MouseUp(flags, hotspot_id)
end

---------------------------------------------------------------------------------
-- Called when plugin is saved - store our variables for next time.
---------------------------------------------------------------------------------
function OnPluginSaveState ()
   SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))

   SetVariable("trleft",textrect_left)
   SetVariable("trright",textrect_right)
   SetVariable("trtop",textrect_top)
   SetVariable("trbottom",textrect_bottom)
end -- OnPluginSaveState

function reset_aard() 
   textrect_left = default_left
   textrect_right = default_right
   textrect_top = default_top
   textrect_bottom = default_bottom
   OnPluginSaveState()
   check_main_background()
end

function OnPluginClose()
   OnPluginDisable()
end

function OnPluginDisable ()
   OnPluginSaveState()
   TextRectangle(0,0,0,0,
      5,  -- BorderOffset, 
      ColourNameToRGB ("darkgray"),    -- BorderColour, 
      2,  -- BorderWidth, 
      ColourNameToRGB ("darkslategray"),  -- OutsideFillColour, 
      0) -- OutsideFillStyle (fine hatch)
   SetBackgroundImage("",0)
   WindowShow( textDragger, false )
   WindowShow( textResizer, false )
   WindowShow( bgwin, false)
end --  OnPluginDisable

function OnPluginEnable ()
   OnPluginSaveState()
   OnPluginInstall()
end -- OnPluginEnable


--=================================================================================
-- Called when plugin is first installed, including when Mush first starts.
-- This is the place to initialize stuff you need in the main plugin.
--=================================================================================
function OnPluginInstall()
   --- Get a unique name for main window and resizer window.
   win = GetPluginID ()  -- get a unique name
   textDragger = "      "..win.."txtdragger"
   textResizer = "      "..win.."txtresize"
   bgwin = "      "..win.."text_background"
      
   local dir = GetInfo(66)
   local imgpath = dir .. "worlds\\plugins\\images\\bg1.png"
   SetBackgroundImage(imgpath,13)

   --- Pull some state variables.
   check_main_background()

   -- give main world window time to stabilize its size and position
   AddTimer("checkTimer", 0, 0, 2, "", timer_flag.Enabled + timer_flag.OneShot + timer_flag.ActiveWhenClosed + timer_flag.Replace + timer_flag.Temporary, "check_main_background")
   
   -- if disabled last time, stay disabled
   if GetVariable ("enabled") == "false" then
      ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
      check (EnablePlugin(GetPluginID (), false))
      return
   end -- they didn't enable us last time
end

function check_main_background()
   textrect_top = math.max(0, tonumber(GetVariable("trtop")) or default_top)
   textrect_bottom = math.min(GetInfo(280), tonumber(GetVariable("trbottom")) or default_bottom)
   textrect_left = math.max(0, tonumber(GetVariable("trleft")) or default_left)
   textrect_right = math.min(GetInfo(281), tonumber(GetVariable("trright")) or default_right)
   draw_main_window()
end

function add_main_resizer()
   if WindowInfo(textResizer, 1) then -- if it already exists
      --- Reposition the resize tag.
      WindowPosition(textResizer, GetInfo(274) - rstagsize+5, GetInfo(275) - rstagsize+5, 0, 6)
   else
      -- Add another mini-window in bottom right corner for resizer tag.
      check (WindowCreate (textResizer, GetInfo(274) - rstagsize+5, GetInfo(275) - rstagsize+5, 
         rstagsize, rstagsize,
         12  , 2, GetNormalColour(1)))

      -- draw the resize widget bottom right corner.
      WindowLine(textResizer, rstagsize-1, rstagsize-0, rstagsize-0, rstagsize-1, 0xffffff, 0, 2)
      WindowLine(textResizer, rstagsize-2, rstagsize-0, rstagsize-0, rstagsize-2, 0x696969, 0, 1)
      WindowLine(textResizer, rstagsize-4, rstagsize-0, rstagsize-0, rstagsize-4, 0xffffff, 0, 2)
      WindowLine(textResizer, rstagsize-5, rstagsize-0, rstagsize-0, rstagsize-5, 0x696969, 0, 1)
      WindowLine(textResizer, rstagsize-7, rstagsize-0, rstagsize-0, rstagsize-7, 0xffffff, 0, 2)
      WindowLine(textResizer, rstagsize-8, rstagsize-0, rstagsize-0, rstagsize-8, 0x696969, 0, 1)
      WindowLine(textResizer, rstagsize-10, rstagsize-0, rstagsize-0, rstagsize-10, 0xffffff, 0, 2)
      WindowLine(textResizer, rstagsize-11, rstagsize-0, rstagsize-0, rstagsize-11, 0x696969, 0, 1)
      WindowLine(textResizer, rstagsize-12, rstagsize-0, rstagsize-0, rstagsize-12, 0xffffff, 0, 1)
      WindowLine(textResizer, rstagsize-13, rstagsize-0, rstagsize-0, rstagsize-13, 0xffffff, 0, 1)

      -- Add a drag handler to this window, effectively allows textrectangle to be resized.
      WindowAddHotspot(textResizer, "resizemain", 0, 0, 0, 0, "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 6, 0)
      WindowDragHandler(textResizer, "resizemain", "ResizeMainCallback", "ResizeReleaseMainCallback", 0)
   end
   WindowShow(textResizer, true)
end

function add_title_dragger() 
   if WindowInfo(textDragger, 1) then -- if it already exists
      --- Reposition the dragger tag.
      WindowPosition(textDragger, GetInfo(272)-6, GetInfo(273)-7, 0, 6)
   else
      -- Add another mini-window at top for dragging bar.
      dragsize = 10

      check (WindowCreate (textDragger, GetInfo(272)-6, GetInfo(273)-6, GetInfo(274)-GetInfo(272)+11, dragsize, 12, 2, GetNormalColour(1)))
      
      WindowAddHotspot(textDragger, "dragmain", 0, 0, 0, 0, "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 1, 0)
      WindowDragHandler(textDragger, "dragmain", "DragMainCallback", "DragReleaseMainCallback", 0)
   end
   WindowShow(textDragger,true)
end

function OnPluginWorldOutputResized()
   AddTimer("checkTimer", 0, 0, .1, "", timer_flag.Enabled + timer_flag.OneShot + timer_flag.ActiveWhenClosed + timer_flag.Replace + timer_flag.Temporary, "check_main_background")
end
   
function draw_main_window()

   -- addresses a problem where new users are trying to play without the window maximized
   local t_right = math.min(textrect_right,GetInfo(281)-7)
   local t_bottom = math.min(textrect_bottom, GetInfo(280)-7)

   TextRectangle(textrect_left, textrect_top, t_right, t_bottom,
      5,  -- BorderOffset, 
      ColourNameToRGB ("darkgray"),    -- BorderColour, 
      2,  -- BorderWidth, 
      ColourNameToRGB ("darkslategray"),  -- OutsideFillColour, 
      miniwin.brush_solid) -- OutsideFillStyle

   -- Add a mini-window under main text area so background won't mess it up.
   trwidth = t_right - textrect_left
   trheight = t_bottom - textrect_top

   WindowCreate (bgwin, textrect_left - 5, textrect_top - 5, 
      math.max(0, trwidth + 10), math.max(0, trheight + 10),
      12  , 3, GetNormalColour(1))
   WindowShow(bgwin, true)

   local dir = GetInfo(66)
   imgpath = dir .. "worlds\\plugins\\images\\aardbg13.png"
   WindowLoadImage(bgwin, "wolf_logo", imgpath)

   xpos = 0 
   ypos = 0

   if trwidth > 500 then
      xpos = (trwidth - 500) / 2
   end

   if trheight > 500 then
      ypos = (trheight - 500) / 2
   end
   WindowDrawImage (bgwin, "wolf_logo", xpos, ypos, 0, 0, miniwin.image_copy)  -- straight copy
   add_title_dragger()
   add_main_resizer()
end

]]>
</script>
</muclient>
